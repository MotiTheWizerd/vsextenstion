"/**\n * Simple markdown to HTML converter\n */\nclass MarkdownParser {\n  static parse(text) {\n    if (!text) {\n      return \"\";\n    }\n\n    // Convert headers\n    text = text.replace(/^### (.*$)/gm, \"<h3>$1</h3>\");\n    text = text.replace(/^## (.*$)/gm, \"<h2>$1</h2>\");\n    text = text.replace(/^# (.*$)/gm, \"<h1>$1</h1>\");\n\n    // Convert code blocks\n    text = text.replace(/```([\\s\\S]*?)```/g, (match, code) => {\n      return `<pre><code>${this.escapeHtml(code.trim())}</code></pre>`;\n    });\n\n    // Convert inline code\n    text = text.replace(/`([^`]+)`/g, \"<code>$1</code>\");\n\n    // Convert links\n    text = text.replace(\n      /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,\n      '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n    );\n\n    // Convert bold and italic\n    text = text.replace(/\\*\\*([^*]+)\\*\\*/g, \"<strong>$1</strong>\");\n    text = text.replace(/\\*([^*]+)\\*/g, \"<em>$1</em>\");\n    // text = text.replace(/__([^_]+)__/g, \"<strong>$1</strong>\");\n    // text = text.replace(/_([^_]+)_/g, \"<em>$1</em>\");\n\n    // Convert lists\n    text = text.replace(/^\\s*[-*]\\s+(.*$)/gm, \"<li>$1</li>\");\n    text = text.replace(/(<li>.*<\\/li>)/gs, \"<ul>$1</ul>\");\n\n    // Convert line breaks\n    text = text.replace(/\\n/g, \"<br>\");\n\n    return text;\n  }\n\n  static escapeHtml(unsafe) {\n    return unsafe\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n  }\n}\n\nexport default MarkdownParser;"